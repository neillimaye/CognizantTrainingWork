-----------------------------------------------

static  UI = data + style
dynamic UI = data + style + behavior

-----------------------------------------------

static  web UI  = HTML + CSS
dynamic web UI  = HTML + CSS + Javascript

-----------------------------------------------

why we need .js programs with HTML-page(s) in browser-envi ?

using browser provided 'web-apis', 
.js programs can bring any dynamic-ui activity to web-page 

web-apis ==> w3c standards to use web

=>  DOM,XHR/Fetch,Timer

-> web-apis are implented by browser vendors (chrome,firefox,IE/Edge..) natively,
   abstracted as 'javascript' objects & functions



using DOM ( DOCUMENT OBJECT MODEL) API
---------------------------------------

 => page manipulation

    -> create,retreive,update,delete HTML elements
    -> can change HTML-element's style ( css )
    -> can change HTML-element's inner content 
    -> can change HTML-element's attributes/properties
    -> can validate all form-fields before submit to server-side-programs
    -> can create rich/user-friendly UI components to HTML-page like calendar,autocomplete,..
    -> can listen events ( mouse,keyboard events) on HTML elements
    ...

----------------------------------------------------------------------    


using Timer API
---------------------------------------

    => can execute some actions on timeout or timeinterval

      setTimeout(fn,1000)
      let interval=setInterval(fn,1000)
      clearInterval(interval)
      

---------------------------------------------------------------------
XHR ( XMLHttpRequest ) Api / fetch API
---------------------------------------------------------------------


client(browser)                    server

              ------------------->
              <-------------------


2 types communication
-------------------------

 1- pull/synchronous/blocking-IO

    by default , browser  always communicate with server sync

 2. push/asynchronous/non-blocking-IO

    in browser , we can async-communication with server using XHR/Fetch Api


------------------------------------------------------------------------------    


HTML
CSS
javascript
+
browser apis => DOM,Timer, XHR/Fetch + HTML-5 Apis

----------------------------------------------------------------------
HTML-5 APIs
----------------------------------------------------------------------

 => https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5


---------------------------------------------------------------------





//------------------------------------------------------------------
 complexities/challanges of plain-js( your code ) with browser-apis
//------------------------------------------------------------------

 ==> browser compatability issues
     - www.caniuse.com
 ==> memory issues
      i.e not claning unused-DOM elements,.. 
 ==> performance issues      
      i.e too many un-necessary DOM query & manipulation  
 ==> tight-coupling b/w UI ( HTML layout & CSS ) and javascript-code
 ==> too much code for simple pages

 -------------------------------------------------------------------
 legacy soln :
----------------------------------------------------------------------   
            ==> server-side page techonologies

               e.g jsp, asp, php , ....


-------------------------------------------------------------------
limitations of server-side page techonologies
-------------------------------------------------------------------


 ==> on every response, we are loading same static resources ( .css , images ),
     will increase n/w bandwidth

 ==> on every new page response, 
     by default browsers re-load current pgase with new-page 

 ==> on every request, server-side programs should re-generate new-page with new info,
     by keeping client session (prev req status )


----------------------------------------------------------------------
modern solution :
----------------------------------------------------------------------    


   ==> using client-side ( browser ) page techonologies


     How ?

      in recent days >

      ==> javascript improved by ECMA spec ( ES6 , Es7 features ) 
      ==> modern browsers improved by HTML-5 Apis ( canvas , drag-drop , audio , ...) by w3c 
      +
      ==> using third-party's javascript lib,F.W and tools


--------------------------------------------------------------------      
javascript lib,F.W and tools
--------------------------------------------------------------------


  --> jQuery

       i.e DOM & XHR utility lib


  MVC - pattern based javascript lib lib
  -------------------------------------

  --> knockout.js
  --> backbone.js
  --> ember.js
  --> sencha Ext.js  ( commercial )
  --> DOJO javascript toolkit
  --> Angular.js : 1.x   from google team


--------------------------------------------------------------------
component based arch for UI appln
--------------------------------------------------------------------
  

  --> React.js  : v16  from facebook     ( our focus )
  --> Angular   : v9  from google-team
  --> Vue.js

------------------------------------------------------------------  
